name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  # Backend tests
  backend-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: verigrade_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci

      - name: Run Prisma migrations
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/verigrade_test
        run: |
          npx prisma generate
          npx prisma migrate deploy

      - name: Run backend tests
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/verigrade_test
          JWT_SECRET: test-secret-key-for-ci
          NODE_ENV: test
        run: npm test

      - name: Run backend linter
        working-directory: ./backend
        run: npm run lint || true

  # Frontend tests
  frontend-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend-new/package-lock.json

      - name: Install frontend dependencies
        working-directory: ./frontend-new
        run: npm ci

      - name: Run frontend linter
        working-directory: ./frontend-new
        run: npm run lint || true

      - name: Build frontend
        working-directory: ./frontend-new
        env:
          NEXT_PUBLIC_API_URL: http://localhost:3001
        run: npm run build

      - name: Run frontend tests (if exists)
        working-directory: ./frontend-new
        run: npm test || echo "No tests configured"

  # Security audit
  security-audit:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Backend security audit
        working-directory: ./backend
        run: npm audit --audit-level=moderate || true

      - name: Frontend security audit
        working-directory: ./frontend-new
        run: npm audit --audit-level=moderate || true

  # Deploy to staging (on develop branch)
  deploy-staging:
    needs: [backend-test, frontend-test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'

    steps:
      - uses: actions/checkout@v4

      - name: Deploy to Railway (Staging)
        run: echo "Deploy to staging environment"
        # Add actual deployment commands here

  # Deploy to production (on main branch)
  deploy-production:
    needs: [backend-test, frontend-test, security-audit]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - uses: actions/checkout@v4

      - name: Deploy to Vercel (Production)
        run: echo "Deploy to production"
        # Add actual Vercel deployment here

      - name: Notify deployment
        run: |
          echo "âœ… Production deployment successful!"
          echo "Frontend: https://verigrade-bookkeeping-platform.vercel.app"


// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Core Models
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String?
  lastName  String?
  role      UserRole @default(USER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id])
  transactions   Transaction[]
  invoices       Invoice[]
  expenses       Expense[]
  projects       Project[]
  timeEntries    TimeEntry[]

  @@map("users")
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  email       String?
  phone       String?
  address     String?
  city        String?
  state       String?
  zipCode     String?
  country     String?
  website     String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  users        User[]
  transactions Transaction[]
  invoices     Invoice[]
  expenses     Expense[]
  projects     Project[]

  @@map("organizations")
}

model Transaction {
  id             String            @id @default(cuid())
  amount         Decimal
  description    String
  category       String?
  subcategory    String?
  type           TransactionType
  status         TransactionStatus @default(PENDING)
  date           DateTime
  reference      String?
  notes          String?
  createdAt      DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  // Relationships
  userId         String
  user           User              @relation(fields: [userId], references: [id])
  organizationId String
  organization   Organization      @relation(fields: [organizationId], references: [id])

  @@map("transactions")
}

model Invoice {
  id             String        @id @default(cuid())
  invoiceNumber  String        @unique
  amount         Decimal
  tax            Decimal        @default(0)
  total          Decimal
  status         InvoiceStatus  @default(DRAFT)
  dueDate        DateTime
  paidDate       DateTime?
  notes          String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Relationships
  userId         String
  user           User          @relation(fields: [userId], references: [id])
  organizationId String
  organization   Organization  @relation(fields: [organizationId], references: [id])

  @@map("invoices")
}

model Expense {
  id             String        @id @default(cuid())
  amount         Decimal
  description    String
  category       String?
  subcategory    String?
  status         ExpenseStatus @default(PENDING)
  date           DateTime
  receipt        String?
  notes          String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Relationships
  userId         String
  user           User          @relation(fields: [userId], references: [id])
  organizationId String
  organization   Organization  @relation(fields: [organizationId], references: [id])

  @@map("expenses")
}

model Project {
  id             String        @id @default(cuid())
  name           String
  description    String?
  status         ProjectStatus @default(ACTIVE)
  budget         Decimal?
  startDate      DateTime?
  endDate        DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Relationships
  userId         String
  user           User          @relation(fields: [userId], references: [id])
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  timeEntries    TimeEntry[]

  @@map("projects")
}

model TimeEntry {
  id             String        @id @default(cuid())
  description    String
  hours          Decimal
  rate           Decimal?
  billable       Boolean       @default(true)
  date           DateTime
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Relationships
  userId         String
  user           User          @relation(fields: [userId], references: [id])
  projectId      String
  project        Project       @relation(fields: [projectId], references: [id])

  @@map("time_entries")
}

// Enums
enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum TransactionType {
  INCOME
  EXPENSE
  TRANSFER
}

enum TransactionStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}

enum ExpenseStatus {
  PENDING
  APPROVED
  REJECTED
  PAID
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  ON_HOLD
  CANCELLED
}




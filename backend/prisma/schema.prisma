// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  firstName     String
  lastName      String
  passwordHash  String
  avatar        String?
  phone         String?
  isActive      Boolean   @default(true)
  emailVerified Boolean   @default(false)
  twoFactorEnabled Boolean @default(false)
  twoFactorSecret String?
  lastLoginAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relationships
  organizationMemberships OrganizationMember[]
  ownedOrganizations      Organization[]       @relation("OrganizationOwner")
  sessions                Session[]
  transactions            Transaction[]
  invoices                Invoice[]
  expenses                Expense[]
  reports                 Report[]
  auditLogs               AuditLog[]

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Organization Management
model Organization {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  logo        String?
  website     String?
  industry    String?
  size        String?
  currency    String   @default("USD")
  timezone    String   @default("UTC")
  address     Json?
  settings    Json?
  isActive    Boolean  @default(true)
  ownerId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  owner      User                   @relation("OrganizationOwner", fields: [ownerId], references: [id])
  members    OrganizationMember[]
  transactions Transaction[]
  invoices   Invoice[]
  expenses   Expense[]
  reports    Report[]
  bankAccounts BankAccount[]
  categories Category[]
  customers  Customer[]
  vendors    Vendor[]

  @@map("organizations")
}

model OrganizationMember {
  id             String   @id @default(cuid())
  organizationId String
  userId         String
  role           Role     @default(VIEWER)
  permissions    Json?
  invitedAt      DateTime @default(now())
  joinedAt       DateTime?
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId])
  @@map("organization_members")
}

enum Role {
  OWNER
  ADMIN
  ACCOUNTANT
  VIEWER
}

// Financial Data
model Transaction {
  id             String          @id @default(cuid())
  organizationId String
  userId         String
  type           TransactionType
  amount         Decimal         @db.Decimal(15, 2)
  description    String
  reference      String?
  category       String?
  subcategory    String?
  date           DateTime
  balance        Decimal?        @db.Decimal(15, 2)
  metadata       Json?
  isReconciled   Boolean         @default(false)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id])
  bankAccount  BankAccount? @relation(fields: [bankAccountId], references: [id])
  bankAccountId String?

  @@map("transactions")
}

enum TransactionType {
  INCOME
  EXPENSE
  TRANSFER
  ADJUSTMENT
}

model BankAccount {
  id             String   @id @default(cuid())
  organizationId String
  name           String
  type           BankAccountType
  accountNumber  String?
  routingNumber  String?
  balance        Decimal  @default(0) @db.Decimal(15, 2)
  currency       String   @default("USD")
  isActive       Boolean  @default(true)
  plaidAccountId String?
  plaidItemId    String?
  lastSyncAt     DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@map("bank_accounts")
}

enum BankAccountType {
  CHECKING
  SAVINGS
  CREDIT_CARD
  INVESTMENT
  LOAN
  OTHER
}

// Invoice Management
model Invoice {
  id             String        @id @default(cuid())
  organizationId String
  userId         String
  invoiceNumber  String
  customerId     String?
  status         InvoiceStatus @default(DRAFT)
  issueDate      DateTime
  dueDate        DateTime?
  paidDate       DateTime?
  subtotal       Decimal       @db.Decimal(15, 2)
  taxAmount      Decimal       @default(0) @db.Decimal(15, 2)
  discountAmount Decimal       @default(0) @db.Decimal(15, 2)
  totalAmount    Decimal       @db.Decimal(15, 2)
  currency       String        @default("USD")
  notes          String?
  terms          String?
  metadata       Json?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id])
  customer     Customer?    @relation(fields: [customerId], references: [id])
  items        InvoiceItem[]

  @@map("invoices")
}

model InvoiceItem {
  id          String  @id @default(cuid())
  invoiceId   String
  description String
  quantity    Decimal @db.Decimal(10, 2)
  unitPrice   Decimal @db.Decimal(15, 2)
  totalPrice  Decimal @db.Decimal(15, 2)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@map("invoice_items")
}

enum InvoiceStatus {
  DRAFT
  SENT
  VIEWED
  PAID
  OVERDUE
  CANCELLED
}

// Expense Management
model Expense {
  id             String       @id @default(cuid())
  organizationId String
  userId         String
  amount         Decimal      @db.Decimal(15, 2)
  description    String
  category       String?
  subcategory    String?
  date           DateTime
  receipt        String?
  vendor         String?
  isReimbursable Boolean      @default(false)
  isTaxDeductible Boolean     @default(false)
  status         ExpenseStatus @default(PENDING)
  approvedBy     String?
  approvedAt     DateTime?
  metadata       Json?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id])

  @@map("expenses")
}

enum ExpenseStatus {
  PENDING
  APPROVED
  REJECTED
  PAID
}

// Customer & Vendor Management
model Customer {
  id             String   @id @default(cuid())
  organizationId String
  name           String
  email          String?
  phone          String?
  address        Json?
  taxId          String?
  metadata       Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  invoices     Invoice[]

  @@map("customers")
}

model Vendor {
  id             String   @id @default(cuid())
  organizationId String
  name           String
  email          String?
  phone          String?
  address        Json?
  taxId          String?
  metadata       Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("vendors")
}

// Categories
model Category {
  id             String  @id @default(cuid())
  organizationId String
  name           String
  type           CategoryType
  parentId       String?
  color          String?
  description    String?
  isActive       Boolean @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  parent       Category?    @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children     Category[]   @relation("CategoryHierarchy")

  @@map("categories")
}

enum CategoryType {
  INCOME
  EXPENSE
  ASSET
  LIABILITY
  EQUITY
}

// Reporting
model Report {
  id             String     @id @default(cuid())
  organizationId String
  userId         String
  name           String
  type           ReportType
  parameters     Json
  data           Json?
  status         ReportStatus @default(PENDING)
  scheduledAt    DateTime?
  generatedAt    DateTime?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id])

  @@map("reports")
}

enum ReportType {
  PROFIT_LOSS
  BALANCE_SHEET
  CASH_FLOW
  AGING_REPORT
  EXPENSE_REPORT
  INCOME_REPORT
  TAX_REPORT
  CUSTOM
}

enum ReportStatus {
  PENDING
  GENERATING
  COMPLETED
  FAILED
}

// AI & MCP Features
model AIAnalysis {
  id             String   @id @default(cuid())
  organizationId String
  type           AIAnalysisType
  input          Json
  output         Json
  confidence     Decimal  @db.Decimal(3, 2)
  model          String
  cost           Decimal? @db.Decimal(10, 4)
  createdAt      DateTime @default(now())

  @@map("ai_analyses")
}

enum AIAnalysisType {
  TRANSACTION_CATEGORIZATION
  EXPENSE_PREDICTION
  ANOMALY_DETECTION
  CASH_FLOW_PREDICTION
  NATURAL_LANGUAGE_QUERY
  INSIGHT_GENERATION
}

// Audit & Compliance
model AuditLog {
  id             String   @id @default(cuid())
  organizationId String?
  userId         String?
  action         String
  resource       String
  resourceId     String?
  changes        Json?
  ipAddress      String?
  userAgent      String?
  createdAt      DateTime @default(now())

  user User? @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

// System Configuration
model SystemConfig {
  id    String @id @default(cuid())
  key   String @unique
  value Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_configs")
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  firstName String
  lastName  String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  invoices    Invoice[]
  expenses    Expense[]
  customers   Customer[]
  transactions Transaction[]

  @@map("users")
}

model Organization {
  id   String @id @default(cuid())
  name String
  slug String @unique

  users User[]

  @@map("organizations")
}

model Customer {
  id          String   @id @default(cuid())
  name        String
  email       String?
  phone       String?
  address     String?
  company     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])

  invoices Invoice[]

  @@map("customers")
}

model Invoice {
  id          String        @id @default(cuid())
  invoiceNumber String      @unique
  customerName  String
  amount       Decimal      @db.Decimal(10, 2)
  status       InvoiceStatus @default(PENDING)
  dueDate      DateTime?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  userId String
  user   User @relation(fields: [userId], references: [id])

  customerId String?
  customer   Customer? @relation(fields: [customerId], references: [id])

  @@map("invoices")
}

model Expense {
  id          String   @id @default(cuid())
  description String
  amount      Decimal  @db.Decimal(10, 2)
  category    String
  date        DateTime
  receipt     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId String
  user   User @relation(fields: [userId], references: [id])

  @@map("expenses")
}

model Transaction {
  id          String            @id @default(cuid())
  type        TransactionType
  description String
  amount      Decimal           @db.Decimal(10, 2)
  category    String
  date        DateTime
  status      TransactionStatus @default(PENDING)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  userId String
  user   User @relation(fields: [userId], references: [id])

  @@map("transactions")
}

enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

enum TransactionType {
  INCOME
  EXPENSE
  TRANSFER
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}
